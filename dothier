#!/usr/bin/env bash
# vim: set ft=sh :

# BSD 3-Clause License
#
# Copyright (c) 2020-2021, Chris 'sh0shin' Frage
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -o pipefail -eu

# self, version, url
readonly dothier_self="${0##*/}"
readonly dothier_version="v0.2.1"
readonly dothier_url="https://sh0shin.org/dothier"

# defautls
## modes
: "${dothier_dir_mode:=0750}"
: "${dothier_file_mode:=0640}"

## creat link
: "${dothier_link:="no"}"

## tmutil exclude
: "${dothier_tmex:=false}"

## dothier config
# -C
: "${dothier_color:=true}"
# -H
: "${dothier_home:="$HOME"}"
# -R
: "${dothier_remove:=false}"

# -c
: "${dothier_config:="$HOME/.config/dothier.conf"}"
# -d
: "${dothier_dir:="$dothier_home/.dotfiles"}"
# -f
: "${dothier_file:=".hier"}"
# -g
: "${dothier_gitpull:=false}"
# -n
: "${dothier_dryrun:=false}"
: "${dothier_runner:="command"}"
# -r
: "${dothier_recursive:=false}"
# -s
: "${dothier_shortmsg:=false}"
# -t
: "${dothier_tmutil:=false}"
# -u
: "${dothier_umask:=$(umask)}"
# -v
: "${dothier_verbose:=false}"

# dothier_msg
dothier_msg()
{
  local level="$1"
  shift
  local msg=("$@")

  local name
  name="${FUNCNAME[1]#dothier_*}"

  # ANSI colors
  # Black        0;30  Dark Gray    1;30
  # Red          0;31  Light Red    1;31
  # Green        0;32  Light Green  1;32
  # Brown/Orange 0;33  Yellow       1;33
  # Blue         0;34  Light Blue   1;34
  # Purple       0;35  Light Purple 1;35
  # Cyan         0;36  Light Cyan   1;36
  # Light Gray   0;37  White        1;37

  # level
  # Emergency     (level 0) **UNUSED**
  # Alert         (level 1) **UNUSED**
  # Critical      (level 2) **UNUSED**
  # Error         (level 3)
  # Warning       (level 4)
  # Notice        (level 5)
  # Info          (level 6)
  # Debug         (level 7) **UNUSED**

  local color_error=""
  local color_warning=""
  local color_notice=""
  local color_info=""
  local color_debug=""

  local color_misc=""
  local color_none=""

  if [[ $dothier_color == true ]]
  then
    color_error="\033[1;31m"
    color_warning="\033[0;33m"
    color_notice="\033[0;37m"
    color_info="\033[0;36m"
    color_debug="\033[0;36m"

    color_misc="\033[0;34m"
    color_none="\033[0m"
  fi

  local color
  case "$level" in

    e|error|3)    color="$color_error";;
    w|warning|4)  color="$color_warning";;
    n|notice|5)   color="$color_notice";;
    i|info|6)     color="$color_info";;
    d|debug|7)    color="$color_debug";;

    v|verbose)    [[ $dothier_verbose == false ]] && return
                  color="$color_info"
                  ;;

    *)            color="$color_misc";;
  esac

  if [[ $dothier_shortmsg == true ]]
  then
    echo -e "${color}${name}\t${msg[*]//$dothier_home/\~}${color_none}"
  else
    echo -e "${color}${name}\t${msg[*]}${color_none}"
  fi
}

# dothier_usage
dothier_usage() {
  echo "$dothier_self $dothier_version ( $dothier_url )"
  echo "Usage: $dothier_self [-CRghnrstv] [-f file] [-d dir] [-H home]"
}

# dothier_help
dothier_help() {
  dothier_usage

  echo "Options:"
  echo "  -C      : Disable colorized output"
  echo "  -H home : Home directory (default: $dothier_home)"
  echo "  -R      : Enable remove/delete mode"

  echo "  -c conf : Use config file (default: $dothier_config)"
  echo "  -d dir  : Use directory for recursive mode (default: $dothier_dir)"
  echo "  -f file : Use dothier file (default: $dothier_file)"
  echo "  -g      : Enable git pull"
  echo "  -h      : Show this help"
  echo "  -n      : Dry-run"
  echo "  -r      : Enable recursive mode"
  echo "  -s      : Short message mode"
  echo "  -t      : Enable tmutil (macOS only)"
  echo "  -u      : Set umask (default: $dothier_umask)"
  echo "  -v      : Enable verbose mode"
}

# dothier_stat <path>
dothier_stat() {
  local path="$1"

  local stat
  case "$OSTYPE" in
    darwin*|freebsd*|openbsd*)
      stat="$(stat -f "%Mp%Lp" "$path")"
      ;;
    linux*)
      stat="$(stat -c "%#a" "$path")"
      ;;
  esac

  echo "$stat"
}

# dothier_mode <path> <type> <mode>
dothier_mode() {
  local path="$1"
  local type="$2"
  local mode="$3"

  if [[ $type == "link" ]]
  then
    dothier_msg w "unsupported: $path type=link"
    return
  fi

  local _mode
  _mode=$(dothier_stat "$path")
  if [[ "$_mode" != "$mode" ]]
  then
    dothier_msg i "change: $path $_mode -> $mode"
    $dothier_runner chmod "$mode" "$path" || :
    return
  else
    dothier_msg v "ok: $path ($mode)"
    return
  fi

  echo "${FUNCNAME[0]} UNHANDLED: $path $type $mode"
}

# dothier_link <path> <type> <mode> <link> <tmex> <repo> <home>
dothier_link() {
  local path="$1"
  local type="$2"
  local mode="$3"
  local link="$4"
  local tmex="$5"
  local repo="$6"
  local home="$7"

  local link_src="$repo/$path"
  local link_dst="$home/$path"

  # link
  if [[ "$type" == "link" ]]
  then

    # absolute
    if [[ "$link" =~ ^(/.*)?$ ]]
    then
      link_src="$link"

    # home
    elif [[ "$link" =~ ^(~/.*)?$ ]]
    then
      link_src="${link//\~/$home}"

    # relative
    elif [[ "$link" =~ ^(.*)?$ ]]
    then
      link_src="$repo/$link"
    fi
  fi

  # checks
  if [[ ! -e "$link_src" ]]
  then
    if [[ $dothier_dryrun == true ]]
    then
      :
    else
      dothier_msg e "$link_src not found!"
      return
    fi

  elif [[ -e "$link_dst" ]]
  then
    # link
    if [[ -L "$link_dst" ]]
    then
      local _readlink
      _readlink="$(readlink "$link_dst")"

      if [[ "$_readlink" != "$link_src" ]]
      then
        # remove
        if [[ $dothier_remove == true ]]
        then
          dothier_msg w "removing link: $link_dst"
          $dothier_runner rm "$link_dst"
        else
          dothier_msg w "wrong link: $link_dst $_readlink"
          return
        fi
      else
        dothier_msg v "ok: $link_src -> $link_dst"
        return
      fi

    # directory
    elif [[ -d "$link_dst" ]]
    then
      # remove
      if [[ $dothier_remove == true ]]
      then
        dothier_msg w "removing dir: $link_dst"
        $dothier_runner rm -r "$link_dst"
      else
        dothier_msg w "exits dir: $link_dst"
        return
      fi

    # file
    elif [[ -f "$link_dst" ]]
    then
      # remove
      if [[ $dothier_remove == true ]]
      then
        dothier_msg w "removing file: $link_dst"
        $dothier_runner rm "$link_dst"
      else
        dothier_msg w "exists file: $link_dst"
        return
      fi
    fi
  fi

  dothier_msg i "symlink $link_src -> $link_dst"
  $dothier_runner ln -s "$link_src" "$link_dst"
  return

  echo "${FUNCNAME[0]} UNHANDLED: $path $type $mode $link $tmex $repo $home"
}

# dothier_dir <path> <type> <mode> <link> <tmex> <repo> <home>
dothier_dir() {
  local path="$1"
  local type="$2"
  local mode="$3"
  local link="$4"
  local tmex="$5"
  local repo="$6"
  local home="$7"

  local repo_path="$repo/$path"
  local home_path="$home/$path"

  # repository directory
  if [[ "$type" == "rdir" ]]
  then

    # linked repo directory
    if [[ "$link" != "no" ]]
    then
      dothier_msg e "unsupported: $path type=rdir & link=yes"
    fi

    # repo directory
    if [[ ! -d "$repo_path" ]]
    then
      dothier_msg w "not found: $repo_path"
      #echo mkdir -m "$mode" "$repo_path"
      return
    elif [[ -d "$repo_path" ]]
    then
      dothier_mode "$repo_path" "$type" "$mode"
      return
    fi

  # home dir
  elif [[ "$type" == "dir" ]]
  then

    # linked directory
    if [[ "$link" != "no" ]]
    then
      if [[ ! -d "$repo_path" ]]
      then
        dothier_msg e "not found: $repo_path"
        return
      else
        dothier_mode "$repo_path" "$type" "$mode"
        dothier_link "$path" "$type" "$mode" "$link" "$tmex" "$repo" "$home"
        return
      fi
    fi

    # home directory
    if [[ ! -d "$home_path" ]]
    then
      dothier_msg i "creating: $home_path"
      $dothier_runner mkdir -m "$mode" "$home_path"
    elif [[ -d "$home_path" ]]
    then
      dothier_msg v "ok: $home_path"
      dothier_mode "$home_path" "$type" "$mode"

      # mode for repo
      if [[ -d "$repo_path" ]]
      then
        dothier_mode "$repo_path" "$type" "$mode"
      fi
    fi

    # tmutil
    dothier_tmutil "$home_path" "$tmex"
    return
  fi

  echo "${FUNCNAME[0]} UNHANDLED: $path $type $mode $link $tmex $repo $home"
}

# dothier_file <path> <type> <mode> <link> <tmex> <repo> <home>
dothier_file() {
  local path="$1"
  local type="$2"
  local mode="$3"
  local link="$4"
  local tmex="$5"
  local repo="$6"
  local home="$7"

  local repo_path="$repo/$path"
  local home_path="$home/$path"

  # type rfile
  if [[ "$type" == "rfile" ]]
  then

    # linked repo file
    if [[ "$link" != "no" ]]
    then
      dothier_msg w "unsupported: $path type=rfile & link=yes"
    fi

    # repo file
    if [[ ! -f "$repo_path" ]]
    then
      echo touch "$mode" "$repo_path"
      return
    elif [[ -f "$repo_path" ]]
    then
      dothier_mode "$repo_path" "$type" "$mode"
      return
    fi

  # type file
  elif [[ "$type" == "file" ]]
  then

    # linked file
    if [[ "$link" != "no" ]]
    then
      if [[ ! -f "$repo_path" ]]
      then
        dothier_msg e "not found: $repo_path"
        return
      else
        dothier_mode "$repo_path" "$type" "$mode"
        dothier_link "$path" "$type" "$mode" "$link" "$tmex" "$repo" "$home"
        return
      fi
    else
      dothier_mode "$repo_path" "$type" "$mode"
      return
    fi

  # type rgit and git
  elif [[ "$type" == "rgit" ]] || [[ "$type" == "git" ]]
  then
    if [[ "$link" != "no" ]]
    then
      dothier_msg w "unsupported: $path type=$type & link=$link"
    fi

    if [[ ! -f "$repo_path" ]]
    then
      dothier_msg e "not found: $repo_path"
      return
    else
      dothier_mode "$repo_path" "$type" "$mode"
      return
    fi
  fi

  echo "${FUNCNAME[0]} UNHANDLED: $path $type $mode $link $tmex $repo $home"
}

# dothier_git <path> <type> <mode> <link> <tmex> <repo> <home>
dothier_git() {
  local path="$1"
  local type="$2"
  local mode="$3"
  local link="$4"
  local tmex="$5"
  local repo="$6"
  local home="$7"

  local repo_path="$repo/$path"
  local home_path="$home/$path"

  # process git file
  if [[ ! -e "$repo_path" ]]
  then
    dothier_msg e "not found: $repo_path"
    return
  fi

  local giturl gitdst gitmode gitpull gitdepth
  IFS=$'\t '
  sort -b "$repo_path" | \
  while read -r giturl gitdst gitmode gitpull gitdepth
  do
    # skip comments
    if [[ "$giturl" =~ ^(#.*)?$ ]]
    then
      continue
    fi

    local gitname
    local gitdir
    gitname="${giturl##*/}"
    gitdir="${gitname%*.git}"

    # rgit
    if [[ "$type" == "rgit" ]]
    then
      gitdst_path="$(dirname "$repo/$path")"

    # git
    elif [[ "$type" == "git" ]]
    then
      gitdst_path="$(dirname "$home/$path")"
    fi

    # inherit path
    if [[ -n "$gitdst" ]]
    then
      gitdst="$gitdst_path/$gitdst"
    fi

    if [[ -n "$gitmode" ]]
    then
      if [[ "$gitmode" =~ ^@ ]]
      then
        gitmode="${gitmode##@}"
        tmex=true
      else
        tmex=false
      fi
    fi

    # defaults
    : "${gitdst:="$gitdst_path/$gitdir"}"
    : "${gitmode:="$dothier_dir_mode"}"
    : "${gitpull:="yes"}"
    : "${gitdepth:="1"}"

    if [[ -d "$gitdst/.git" ]]
    then
      if [[ "$gitpull" == "yes" ]] && [[ $dothier_gitpull == true ]]
      then
        dothier_msg i "pull: $gitdst"
        $dothier_runner git --git-dir="$gitdst/.git" --work-tree="$gitdst" pull --quiet
      else
        dothier_msg v "ok: $gitdst"
      fi
    else
      dothier_msg i "clone: $giturl $gitdst"
      $dothier_runner git  clone --quiet --depth="$gitdepth" "$giturl" "$gitdst"
    fi

    # mode
    dothier_mode "$gitdst" "$type" "$gitmode"

    # tmutil
    dothier_tmutil "$gitdst" "$tmex"
  done
  unset IFS
}

# dothier_tmutil <path> <tmex>
dothier_tmutil() {
  local path="$1"
  local tmex="$2"

  # tmutil enabled
  [[ $dothier_tmutil != true ]] && return

  # only darwin/macos is supported
  [[ "$OSTYPE" != darwin* ]] && return

  if [[ -f "$path" ]]
  then
    dothier_msg e "unsupported: $path type=file"
    return
  elif [[ -L "$path" ]]
  then
    dothier_msg e "unsupported: $path type=link"
    return
  fi

  # dry-run
  if [[ $dothier_dryrun == true ]]
  then
    dothier_msg i "$path"
    $dothier_runner "skipping tmutil"
    return
  fi

  if [[ -d "$path" ]]
  then
    if ( xattr "$path" | grep -q com_apple_backup_excludeItem )
    then
      if [[ $tmex == false ]]
      then
        dothier_msg i "removing exclusion: $path"
        tmutil removeexclusion "$path"
      else
        dothier_msg v "ok: $path ($tmex)"
      fi
    elif [[ $tmex == true ]]
    then
      dothier_msg i "adding exclusion: $path"
      tmutil addexclusion "$path"
    else
      dothier_msg v "ok: $path ($tmex)"
    fi
    return
  else
    dothier_msg e "not found: $path"
    return
  fi

  echo "${FUNCNAME[0]} UNHANDLED: $path $tmex"
}

# dothier_read <file> <home>
dothier_read() {
  local file="$1"
  local home="$2"

  if [[ ! -e "$file" ]]
  then
    dothier_msg e "not found: $file"
    return
  else
    dothier_msg n "$file"
  fi

  # get repo from file
  local repo
  repo="$(cd "$(dirname "$file")" && echo "$PWD")"

  # process file
  local path type mode link tmex
  IFS=$'\t '
  sort -b -k2,2 "$file" | \
  while read -r path type mode link
  do
    # skip comments
    if [[ "$path" =~ ^(#.*)?$ ]]
    then
      continue
    fi

    # check path
    ## skip absolute path
    if [[ "$path" =~ ^(/.*)?$ ]]
    then
      dothier_msg w "unsupported: $path absolute path"
      continue
    fi

    # check mode
    ## skip empty mode
    if [[ -z "$mode" ]]
    then
      dothier_msg w "unsupported: $path empty mode"
      continue
    fi

    # tmutil exclude
    if [[ "$mode" =~ ^@ ]]
    then
      mode="${mode##@}"
      tmex=true
    else
      tmex=false
    fi

    # link defaults
    : "${link:=$dothier_link}"

    # set run type
    local read_run
    case "$type" in
      rdir|dir)
        read_run=("dothier_dir")
        ;;
      rfile|file)
        read_run=("dothier_file")
        ;;
      rgit|git)
        read_run=("dothier_file" "dothier_git")
        ;;
      link)
        read_run=("dothier_link")
        ;;
      *)
        # upgrade
        if [[ "$type" == "ldir" ]]
        then
          dothier_msg w "upgrade: $file \"$path ldir\" to \"$path rdir\""
        elif [[ "$type" == "lfile" ]]
        then
          dothier_msg w "upgrade: $file \"$path lfile\" to \"$path rfile\""
        elif [[ "$type" == "lgit" ]]
        then
          dothier_msg w "upgrade: $file \"$path lgit\" to \"$path rgit\""
        else
          dothier_msg e "unsupported: $file $path type=$type"
        fi
        continue
        ;;
    esac

    # run type
    local _read_run
    for _read_run in "${read_run[@]}"
    do
      if [[ "$(type -t "$_read_run")" == "function" ]]
      then
        #echo "read_run=$_read_run" "path=$path" "type=$type" "mode=$mode" "link=$link" "tmex=$tmex" "repo=$repo" "home=$home"
        "$_read_run" "$path" "$type" "$mode" "$link" "$tmex" "$repo" "$home"
      else
        dothier_msg w "unsupported: $_read_run"
        continue
      fi
    done

  done
  unset IFS
}

# dothier_recursive
dothier_recursive()
{
  local dothier_found
  dothier_found="$(find "$dothier_dir" -type f -iname "$dothier_file" | sort -u)"

  local _dothier
  for _dothier in $dothier_found
  do
    dothier_read "$_dothier" "$dothier_home"
  done
}

# dothier_main
dothier_main() {
  local main_run=""

  while getopts ":CH:Rc:d:f:ghnrstu:v" opt
  do
    case $opt in
      C) dothier_color=false ;;
      H) dothier_home="$OPTARG";;
      R) dothier_remove=true;;
      c) dothier_config="$OPTARG";;
      d) dothier_dir="$OPTARG";;
      f) dothier_file="$OPTARG";;
      g) dothier_gitpull=true;;

      h)
        dothier_help
        exit 1
        ;;
      n)
        dothier_dryrun=true
        dothier_runner="echo -e \t(dry-run): "
        ;;

      r) main_run="dothier_recursive";;
      s) dothier_shortmsg=true;;
      t) dothier_tmutil=true;;
      u) dothier_umask="$OPTARG";;
      v) dothier_verbose=true;;

      :)
        echo "-${OPTARG} required argument missing!"
        dothier_usage
        exit 1
        ;;
      ?)
        echo "-${OPTARG} is invalid!"
        dothier_usage
        exit 1
        ;;
      *)
        dothier_usage
        exit 1
        ;;
    esac
  done

  # config
  if [[ -f "$dothier_config" ]]
  then
    # TODO: check config
    # shellcheck source=/dev/null
    source "$dothier_config"
    dothier_msg v "config: $dothier_config"
  else
    if [[ "$dothier_config" != "$HOME/.config/dothier.conf" ]]
    then
      dothier_msg e "config not found: $dothier_config"
      return
    fi
  fi

  # umask
  umask "$dothier_umask"

  # absolute
  if [[ ! "$dothier_home" =~ ^(/.*)?$ ]]
  then
    dothier_home="$PWD/$dothier_home"
  fi

  if [[ ! -d "$dothier_home" ]]
  then
    dothier_msg w "creating: $dothier_home"
    $dothier_runner mkdir -m "$dothier_dir_mode" "$dothier_home"
  fi

  if [[ "$OPTIND" -ge 2 ]]
  then
    if [[ -n "$main_run" ]]
    then
      if [[ "$(type -t "$main_run")" == "function" ]]
      then
        "$main_run"
      fi
    else
      dothier_read "$dothier_file" "$dothier_home"
    fi
  else
    dothier_usage
  fi
}

dothier_main "$@"
