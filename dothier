#!/usr/bin/env bash
#

# self, version, url
readonly dothier_self="$(basename "$0")"
readonly dothier_version="v0.1.0-beta.4"
readonly dothier_url="https://sh0shin.org/dothier"

# default options
# -D
dothier_debug=false
# -g
dothier_gitpull="no"
# -r
dothier_recursive=false
# -v
dothier_verbose="no"
# -f file
dothier_file=".hier"
# -d dir
dothier_dir="$HOME/.dotfiles"
# -H home
dothier_home="$HOME"

# dothier file defaults
: "${dothier_file_dirmode:=0755}"
: "${dothier_file_filemode:=0644}"
: "${dothier_file_link:=no}"
: "${dothier_file_gitpull:=no}"
: "${dothier_file_gitdepth:=1}"
: "${dothier_file_tmex:=0}"
: "${dothier_file_touch:=0}"

check_support()
{
  case "$OSTYPE" in
    darwin*|freebsd*|openbsd*|linux*)
      true
      ;;
    *)
      echo "[E] UNSUPPORTED OS $OSTYPE"
      exit 1
      ;;
  esac
} # check_support

show_usage()
{
  echo "$dothier_self $dothier_version ( $dothier_url )"
  echo "Usage: $dothier_self [-Dhrv] [-f file] [-d dir] [-H home]"
} # show_usage

show_help()
{
  show_usage
  echo "Options:"
  echo "  -D      : Enable verbose debug output"
  echo "  -g      : Enable git pull (default: $dothier_gitpull)"
  echo "  -h      : Show this help"
  echo "  -r      : Enable recursive mode (default: $dothier_recursive)"
  echo "  -v      : Verbose output (default: $dothier_verbose)"
  echo "  -f file : The .hier file to use (default: $dothier_file)"
  echo "  -d dir  : Use directory for recursive mode (default: $dothier_dir)"
  echo "  -H home : Home directory (default: $dothier_home)"
  echo
} # show_help

# stat_mode <path>
stat_mode()
{
  local path="$1"
  local stat

  case "$OSTYPE" in
    darwin*|freebsd*|openbsd*)
      stat="$(stat -f "%Mp%Lp" "$path")"
      ;;
    linux*)
      stat="$(stat -c "%#a" "$path")"
      ;;
  esac
  echo "$stat"
}

# exec_mode <path> <mode>
exec_mode()
{
  local path="$1"
  local mode="$2"
  local type="$3"
  local _mode

  # debug
  if [[ "$dothier_debug" == true ]]
  then
    echo -e "[D] (mode)\tEXEC" \
          "PATH=$path" \
          "MODE=$mode" \
          "TYPE=$type"
  fi

  # delete mode
  # TODO: change 0000 -> rm & rmr
  if [[ "$mode" == "0000" ]]
  then

    # directory
    if [[ -d "$path" ]]
    then
      echo -e "[I] (mode)\tREMOVING PATH=$path TYPE=$type"
      rmdir "$path"

    # file
    elif [[ -f "$path" ]]
    then
      echo -e "[I] (mode)\tREMOVING PATH=$path TYPE=$type"
      rm "$path"
    fi
    return
  fi

  # check mode
  _mode="$(stat_mode "$path")"
  if [[ "$_mode" != "$mode" ]]
  then
    if [[ ! -L "$path" ]]
    then

      # directory
      if [[ -d "$path" ]]
      then
        # TODO: warn dirmode <700
        echo -e "[I] (mode)\tCHANGING MODE=$_mode > $mode PATH=$path TYPE=$type"
        chmod "$mode" "$path"
      fi

      # file
      if [[ -f "$path" ]]
      then
        # TODO: warn filemode >770
        echo -e "[I] (mode)\tCHANGING MODE=$_mode > $mode PATH=$path TYPE=$type"
        chmod "$mode" "$path"
      fi
    else
      echo -e "[X] (mode)\tPATH=$path TYPE=$type"
    fi
  else
    echo -e "[V] (mode)\tOK MODE=$mode PATH=$path TYPE=$type"
  fi
}

# exec_link <root> <home> <path> <type> <mode> <link> <tmex>
exec_link()
{
  local root="$1"
  local home="$2"

  # dothier content
  local path="$3"
  local type="$4"
  local mode="$5"
  local link="$6"
  local tmex="$7"

  local root_path="$root/$path"
  local home_path="$home/$path"

  if [[ "$dothier_debug" == true ]]
  then
    echo -e "[D] (link)\tEXEC" \
          "ROOT=$root" \
          "HOME=$home" \
          "PATH=$path" \
          "TYPE=$type" \
          "MODE=$mode" \
          "LINK=$link" \
          "TMEX=$tmex"
  fi

  # ldir || lfile
  if [[ "$type" == "ldir" ]] || [[ "$type" == "lfile" ]]
  then
    # unsupported link
    if [[ "$link" == "yes" ]] || [[ "$link" != "no" ]]
    then
      echo -e "[W] (link)\tUNSUPPORTED TYPE=$type LINK=$link"
      return
    else
      # skip
      if [[ "$dothier_debug" == true ]]
      then
        echo -e "[D] (link)\tSKIPPING TYPE=$type"
      fi
      return
    fi
  fi

  # type dir || file
  if [[ "$type" == "dir" ]] || [[ "$type" == "lfile" ]]
  then
    echo -e "[D] (link)\tDOING TYPE=$type"

    if [[ "$link" != "yes" ]] && [[ "$link" != "no" ]]
    then
      echo -e "[D] (link)\tSETTING $home/$link"
      home_path="$home/$link"
    fi
  fi

  # type link
  if [[ "$type" == "link" ]]
  then
    echo -e "[D] (link)\tDOING TYPE=$type"

    if [[ "$link" != "yes" ]] && [[ "$link" != "no" ]]
    then

      if [[ "$link" =~ ^(/.*)?$ ]]
      then
        # absolute
        root_path="$link"
      else
        # relative
        root_path="$root/$link"
      fi
    fi
  fi

  # check source
  if [[ ! -e "$root_path" ]] && [[ "$link" != "no" ]]
  then
    echo -e "[E] (link)\tUNREADABLE TYPE=$type $root_path LINK=$link"
    return 1
  fi

  # check & clean destination
  if [[ ! -L "$home_path" ]] && [[ -d "$home_path" ]] && [[ "$type" != "dir" ]]
  then
    echo -e "[I] (link)\tREMOVING DIRECTORY $home_path"
    echo "rm -r $home_path"
  fi


  # devel
  return

  # check source
  if [[ ! -e "$src_path" ]]
  then
    echo "E: $src_path not readable!"
    return
  fi

  # check destination
  # remove dir
  if [[ ! -L "$dst_path" ]] \
    && [[ -d "$dst_path" ]] \
    && [[ "$type" != "dir" ]]
  then
    rm -r "$dst_path"
  fi

  # remove file
  if [[ ! -L "$dst_path" ]] \
    && [[ -f "$dst_path" ]] \
    && [[ "$type" != "file" ]]
  then
    rm "$dst_path"
  fi

  # wrong link
  if [[ "$(readlink "$dst_path")" != "$src_path" ]] \
    && [[ "$link" != "no" ]]
  then

    # remove dir
    if [[ -d "$dst_path" ]]
    then
      rm -r "$dst_path"

    # remove file
    else
      rm -f "$dst_path"
    fi
  fi

  # remove no link
  if [[ -L "$dst_path" ]] \
    && [[ "$link" == "no" ]]
  then
    rm "$dst_path"
    return
  fi

  # delete mode
  if [[ "$mode" == "0000" ]]
  then
    if [[ -L "$dst_path" ]]
    then
      echo rm "$dst_path"
      return
    fi
  fi

  # create link
  if [[ "$link" != "no" ]]
  then
    if [[ ! -L "$dst_path" ]]
    then
      ln -s "$src_path" "$dst_path"
    fi
  fi

  # pass tmutil
  exec_tmutil "$dst_path" "$tmex"
}

# exec_dir <root> <home> <path> <type> <mode> <link> <tmex>
exec_dir()
{
  local root="$1"
  local home="$2"

  # dothier content
  local path="$3"
  local type="$4"
  local mode="$5"
  local link="$6"
  local tmex="$7"

  local root_path="$root/$path"
  local home_path="$home/$path"

  if [[ "$dothier_debug" == true ]]
  then
    echo -e "[D] (dir)\tEXEC" \
          "ROOT=$root" \
          "HOME=$home" \
          "PATH=$path" \
          "TYPE=$type" \
          "MODE=$mode" \
          "LINK=$link" \
          "TMEX=$tmex"
  fi

  # delete mode
  # type ldir
  if [[ "$mode" == "0000" ]] && [[ "$type" == "ldir" ]]
  then
    exec_mode "$root_path" "$mode" "$type"
    return
  fi
  # type dir
  if [[ "$mode" == "0000" ]] && [[ "$type" == "dir" ]]
  then
    exec_mode "$home_path" "$mode" "$type"
    return
  fi

  # type ldir
  if [[ "$type" == "ldir" ]]
  then
    if [[ ! -d "$root_path" ]]
    then
      if [[ -e "$root_path" ]]
      then
        echo -e "[E] (dir)\tNOT A DIRECTORY PATH=$root_path TYPE=$type"
        return
      else
        echo -e "[I] (dir)\tCREATING PATH=$root_path TYPE=$type"
        mkdir -m "$mode" "$root_path"
      fi
    else
      echo -e "[V] (dir)\tOK PATH=$root_path TYPE=$type"
      # pass mode
      exec_mode "$root_path" "$mode" "$type"
    fi
  fi

  # type dir
  if [[ "$type" == "dir" ]]
  then
    # check root
    if [[ ! -d "$root_path" ]] && [[ "$link" != "no" ]]
    then
      if [[ -e "$root_path" ]]
      then
        echo -e "[E] (dir)\tNOT A DIRECTORY PATH=$root_path TYPE=$type"
        return
      else
        echo -e "[E] (dir)\tNOT FOUND PATH=$root_path TYPE=$type"
        return
      fi
    fi

    # check home
    if [[ ! -d "$home_path" ]]
    then
      if [[ -e "$home_path" ]]
      then
        echo -e "[E] (dir)\tNOT A DIRECTORY PATH=$home_path TYPE=$type"
        return
      fi
      # skip link
      if [[ "$link" == "no" ]]
      then
        echo -e "[I] (dir)\tCREATING PATH=$home_path TYPE=$type"
        mkdir -m "$mode" "$home_path"
      fi
    else
      echo -e "[V] (dir)\tOK PATH=$home_path TYPE=$type"
      # pass mode
      exec_mode "$home_path" "$mode" "$type"
    fi
  fi

  # pass link
  exec_link "$root" "$home" "$path" "$type" "$mode" "$link" "$tmex"
}

# exec_file <root> <home> <path> <type> <mode> <link> <tmex>
exec_file()
{
  local root="$1"
  local home="$2"

  # dothier content
  local path="$3"
  local type="$4"
  local mode="$5"
  local link="$6"
  local tmex="$7"

  local root_path="$root/$path"
  local home_path="$home/$path"

  if [[ "$dothier_debug" == true ]]
  then
    echo -e "[D] (file)\tEXEC" \
          "ROOT=$root" \
          "HOME=$home" \
          "PATH=$path" \
          "TYPE=$type" \
          "MODE=$mode" \
          "LINK=$link" \
          "TMEX=$tmex"
  fi

  # delete mode
  if [[ "$mode" == "0000" ]]
  then
    exec_mode "$root_path" "$mode" "$type"
    exec_mode "$home_path" "$mode" "$type"
    return
  fi

  # source file
  if [[ ! -f "$root_path" ]]
  then
    echo -e "[E] (file)\tNOT FOUND PATH=$root_path TYPE=$type"
    #echo -e "[W] (file)\tCREATING PATH=$root_path TYPE=$type"
    #touch "$root_path"
    return
  else
    echo -e "[V] (file)\tOK PATH=$root_path TYPE=$type"
  fi

  # mode
  exec_mode "$root_path" "$mode" "$type"

  # pass link
  exec_link "$root" "$home" "$path" "$type" "$mode" "$link" "$tmex"
}

# exec_git <dothier_root> <dothier_home> <path> <type> <gitpull> <gitdepth>
exec_git()
{
  [[ "$dothier_verbose" == "yes" ]] && echo "${FUNCNAME[0]}" "$@"

  local dothier_root="$1"
  local dothier_home="$2"

  local path="$3"
  local type="$4"
  local gitpull="$5"
  local gitdepth="$6"

  local src_path="$dothier_root/$path"
  local dst_path

  if [[ "$type" == "lgit" ]]
  then
    dst_path="$(dirname "$dothier_root/$path")"
  else
    dst_path="$(dirname "$dothier_home/$path")"
  fi

  local giturl gitname gitdir
  IFS=$' \t'
  while read -r giturl gitdst
  do
    # skip comments
    [[ "$giturl" =~ ^(#.*)?$ ]] && continue

    gitname="${giturl##*/}"
    gitdir="${gitname%*.git}"

    # tmutil exclusion
    if [[ "$gitdst" =~ ^@ ]]
    then
      tmex=1
      gitdst="${gitdst##@}"
    fi

    if [[ -n "$gitdst" ]]
    then
      # absolute path
      if [[ "$gitdir" =~ ^(/.*)?$ ]]
      then
        gitdst="$gitdst"
      else
        gitdst="$dst_path/$gitdst"
      fi
    else
      gitdst="$dst_path/$gitdir"
    fi

    if [[ "$dothier_verbose" == "yes" ]]
    then
      echo " : git: $gitdst ($giturl)"
    else
      echo " : git: $gitdst"
    fi

    if [[ -d "$gitdst" ]]
    then
      if [[ "$gitpull" == "yes" ]]
      then
        ( cd "$gitdst" && git pull -q --depth "$gitdepth" )
      fi
    else
      ( git clone -q --depth "$gitdepth" "$giturl" "$gitdst" )
    fi

    # pass tmutil
    exec_tmutil "$gitdst" "$tmex"

  done < "$src_path"
  unset IFS
}

# exec_tmutil <path> <tmex>
exec_tmutil()
{
  [[ "$OSTYPE" != darwin* ]] && return
  [[ "$dothier_verbose" == "yes" ]] && echo "${FUNCNAME[0]}" "$@"

  local path="$1"
  local tmex="$2"

  # destination
  if [[ -e "$path" ]]
  then
    if [[ -L "$path" ]] && [[ "$tmex" -eq 1 ]]
    then
      echo "  : tmutil: is link $path"
      return
    fi

    if ( xattr "$path" | grep -q com_apple_backup_excludeItem )
    then
      if [[ "$tmex" -eq  0 ]]
      then
        echo " : tmutil: include $path"
        tmutil removeexclusion "$path"
      fi
    else
      if [[ "$tmex" -eq 1 ]]
      then
        echo " : tmutil: exclude $path"
        tmutil addexclusion "$path"
      fi
    fi
  fi
}

# read_dothier <dothier_file> <dothier_home>
read_dothier()
{
  local dothier_file
  local dothier_home
  local dothier_root
  local dothier_exec

  dothier_file="$1"
  dothier_home="$2"
  dothier_root="$(cd "$(dirname "$dothier_file")" && echo "$PWD")"

  # dothier file
  if [[ ! -e "$dothier_file" ]]
  then
    echo "[E] (read) NOT FOUND $dothier_file"
    show_help
    return
  fi

  # create home
  if [[ ! -d "$dothier_home" ]]
  then
    echo -e "[W] (read)\tHOME NOT FOUND $dothier_home"
    echo -e "[W] (read)\tCREATING HOME $dothier_home"
    mkdir -p "$dothier_home"
  fi

  # git pull (-g)
  if [[ "$dothier_gitpull" == "yes" ]]
  then
    if [[ -d "$dothier_root/.git" ]]
    then
      ( cd "$dothier_root" && git pull -q --depth "${gitdepth:-$dothier_file_gitdepth}" )
    fi
  fi

  # read file
  IFS=$' \t'
  while read -r path type mode link
  do
    # skip comments
    if [[ "$path" =~ ^(#.*)?$ ]]
    then
      continue
    fi

    # tmutil exclusion
    tmex="${dothier_file_tmex}"
    if [[ "$mode" =~ ^@ ]]
    then
      mode="${mode##@}"
      tmex=1
    fi

    # execute type
    case "$type" in
      dir|ldir)
        dothier_exec="exec_dir"
        # default dirmode
        mode="${mode:-$dothier_file_dirmode}"
        ;;
      file|lfile)
        dothier_exec="exec_file"
        # default filemode
        mode="${mode:-$dothier_file_filemode}"
        ;;
      link|llink)
        dothier_exec="exec_link"
        ;;
      git|lgit)
        dothier_exec="exec_git"
        # default gitpull
        mode="${mode:-$dothier_file_gitpull}"
        # default gitdepth
        link="${link:-$dothier_file_gitdepth}"
        ;;
      *)
        echo "E: unknown type $type"
        return
        ;;
    esac

    # default link
    link="${link:-$dothier_file_link}"

    if [[ "$(type -t "$dothier_exec")" == "function" ]]
    then
      # exec type
      "$dothier_exec" "$dothier_root" "$dothier_home" \
        "$path" "$type" "$mode" "$link" "$tmex"
    else
      echo "E: no such function $dothier_exec"
    fi

  done < "$dothier_file"
  unset IFS
}

# read_dothier_recursive <dothier_file> <dothier_home> <dothier_dir>
read_dothier_recursive()
{
  local dothier_file
  local dothier_home
  local dothier_dir
  local dothier_found
  local dothier_found_for
  local dothier_found_dirname

  dothier_file="$1"
  dothier_home="$2"
  dothier_dir="$3"
  dothier_found="$(find "$dothier_dir" -type f -iname "$dothier_file" | sort -u)"

  for dothier_found_for in $dothier_found
  do
    dothier_found_dirname="$(basename "$(dirname "$dothier_found_for")")"
    echo ": $dothier_found_dirname"
    read_dothier "$dothier_found_for" "$dothier_home"
  done
}

# supported
check_support

# options
while getopts ":Dghrvf:d:H:" opt
do
  case $opt in
    D)
      dothier_debug=true
      dothier_verbose=true
      ;;
    g)
      dothier_gitpull="yes"
      ;;
    h)
      show_help
      exit 1
      ;;
    r)
      dothier_recursive=true
      ;;
    v)
      dothier_verbose=true
      ;;
    f)
      dothier_file="$OPTARG"
      ;;
    d)
      dothier_dir="$OPTARG"
      ;;
    H)
      dothier_home="$OPTARG"
      ;;
    \?)
      echo "-$OPTARG is invalid!"
      show_usage
      exit 1
      ;;
    :)
      echo "-$OPTARG requires an argument!"
      show_usage
      exit 1
      ;;
    *)
      show_usage
      exit 1
      ;;
  esac
done

# check
if [[ "$OPTIND" -eq 1 ]] || [[ "$OPTIND" -lt "$#" ]]
then
  show_usage
  exit 1
fi

# main
if [[ "$dothier_recursive" == true ]]
then
  read_dothier_recursive "$dothier_file" "$dothier_home" "$dothier_dir"
else
  read_dothier "$dothier_file" "$dothier_home"
fi
