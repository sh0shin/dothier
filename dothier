#!/usr/bin/env bash
#

# self, version, url
readonly dothier_self="$(basename "$0")"
readonly dothier_version="v0.1.0-beta"
readonly dothier_url="https://sh0shin.org/dothier"

# default options
# -D
dothier_debug="no"
# -r
dothier_recursive="no"
# -g
dothier_gitpull="no"
# -f file
dothier_file=".hier"
# -d dir
dothier_dir="$HOME/.dotfiles"
# -H home
dothier_home="$HOME"

# dothier file defaults
: "${dothier_file_dirmode:=0755}"
: "${dothier_file_filemode:=0644}"
: "${dothier_file_link:=no}"
: "${dothier_file_gitpull:=no}"
: "${dothier_file_gitdepth:=1}"

check_support()
{
  case "$OSTYPE" in
    darwin*|freebsd*|openbsd*|linux*)
      true
      ;;
    *)
      echo "E: unsupported OS $OSTYPE"
      exit
      ;;
  esac
} # check_support

show_usage()
{
  echo "$dothier_self $dothier_version ( $dothier_url )"
  echo "Usage: $dothier_self [-Dhr] [-f file] [-d dir] [-H home]"
} # show_usage

show_help()
{
  show_usage
  echo "Options:"
  echo "  -D      : Enable debug output"
  echo "  -h      : Show this help"
  echo "  -r      : Enabled recursive mode (default: $dothier_recursive)"
  echo "  -g      : Enable git pull (default: $dothier_gitpull)"
  echo "  -f file : The .hier file to use (default: $dothier_file)"
  echo "  -d dir  : Use directory for recursive mode (default: $dothier_dir)"
  echo "  -H home : Home directory (default: $dothier_home)"
  echo
} # show_help

stat_mode()
{
  local path stat
  path="${1:-/dev/null}"

  case "$OSTYPE" in
    darwin*|freebsd*|openbsd*)
      stat="$(stat -f "%Mp%Lp" "$path")"
      ;;
    linux*)
      stat="$(stat -c "%#a" "$path")"
      ;;
  esac
  echo "$stat"
} # stat_mode

change_mode()
{
  local path mode
  path="$1"
  mode="$2"

  case "$OSTYPE" in
    darwin*|freebsd*|openbsd*)
      chmod -h "$mode" "$path"
      ;;
    linux*)
      # FIXME
      [[ ! -L "$path" ]] && echo chmod "$mode" "$path"
      ;;
    esac
} # change_mode

exec_link()
{
  local src="$1"
  local dst="$2"
  local path="$3"
  local type="$4"

  local mode="${5:-$dothier_file_filemode}"
  local link="${6:-$dothier_file_link}"

  local src_path="$src/$path"
  local dst_path="$dst/$path"

  [[ "$dothier_debug" == "yes" ]] && echo "${FUNCNAME[0]}" "$@"

  # dir & file
  if [[ "$type" == "dir" ]] || [[ "$type" == "file" ]]
  then

    if [[ "$link" != "yes" ]] \
      && [[ "$link" != "no" ]]
    then
      dst_path="$dst/$link"
    fi

  # link
  elif [[ "$type" == "link" ]]
  then

    if [[ "$link" != "yes" ]] \
      && [[ "$link" != "no" ]]
    then

      # absolute link
      if [[ "$link" =~ ^(/.*)?$ ]]
      then
        src_path="$link"

      # relative link
      else
        src_path="$src/$link"
      fi
    fi
  fi

  # check source
  if [[ ! -e "$src_path" ]]
  then
    echo "E: $src_path not readable!"
    return
  fi

  # check destination
  # remove dir
  if [[ ! -L "$dst_path" ]] \
    && [[ -d "$dst_path" ]] \
    && [[ "$type" != "dir" ]]
  then
    rm -r "$dst_path"
  fi

  # remove file
  if [[ ! -L "$dst_path" ]] \
    && [[ -f "$dst_path" ]] \
    && [[ "$type" != "file" ]]
  then
    rm "$dst_path"
  fi

  # wrong link
  if [[ "$(readlink "$dst_path")" != "$src_path" ]] \
    && [[ "$link" != "no" ]]
  then

    # remove dir
    if [[ -d "$dst_path" ]]
    then
      rm -r "$dst_path"

    # remove file
    else
      rm -f "$dst_path"
    fi
  fi

  # remove no link
  if [[ -L "$dst_path" ]] \
    && [[ "$link" == "no" ]]
  then
    rm "$dst_path"
    return
  fi

  # delete mode
  if [[ "$mode" == "0000" ]]
  then
    if [[ -L "$dst_path" ]]
    then
      echo rm "$dst_path"
      return
    fi
  fi

  # create link
  if [[ "$link" != "no" ]]
  then
    if [[ ! -L "$dst_path" ]]
    then
      ln -s "$src_path" "$dst_path"
    fi
  fi
} # dotexec_link

exec_dir()
{
  local src="$1"
  local dst="$2"
  local path="$3"
  local type="$4"

  local mode="${5:-$dothier_file_dirmode}"
  local link="${6:-$dothier_file_link}"

  local src_path="$src/$path"
  local dst_path="$dst/$path"

  [[ "$dothier_debug" == "yes" ]] && echo "${FUNCNAME[0]}" "$@"

  # delete mode
  if [[ "$mode" == "0000" ]]
  then

    # source
    if [[ -e "$src_path" ]]
    then
      rm -r "$src_path"

      # local only
      if [[ "$type" == "ldir" ]]
      then
        return
      fi
    fi

    # destination
    if [[ -e "$dst_path" ]]
    then
      rm -r "$dst_path"
    fi

    return
  fi

  # check source
  if [[ ! -d "$src_path" ]]
  then

    if [[ -e "$src_path" ]]
    then
      echo "E: $src_path exists and is not a directory!"
      return
    fi

    mkdir -m "$mode" "$src_path"
  fi

  if [[ "$(stat_mode "$src_path")" != "$mode" ]]
  then
    change_mode "$src_path" "$mode"
  fi

  # not local
  if [[ "$type" != "ldir" ]]
  then

    # check destination
    if [[ ! -d "$dst_path" ]] \
      && [[ "$link" == "no" ]]
    then

      if [[ -e "$dst_path" ]]
      then
        echo "W: $dst_path exists!"
      fi

      mkdir -m "$mode" "$dst_path"
    fi

    if [[ "$link" == "no" ]]
    then
      if [[ "$(stat_mode "$dst_path")" != "$mode" ]]
      then
        change_mode "$dst_path" "$mode"
      fi
    fi

    # pass linking
    dotexec_link "$src" "$dst" "$path" "$type" "$mode" "$link"
  fi
} # dotexec_dir

exec_file()
{
  local src="$1"
  local dst="$2"
  local path="$3"
  local type="$4"

  local mode="${5:-$dothier_file_filemode}"
  local link="${6:-$dothier_file_link}"

  local src_path="$src/$path"
  local dst_path="$dst/$path"

  [[ "$dothier_debug" == "yes" ]] && echo "${FUNCNAME[0]}" "$@"

  # delete mode
  if [[ "$mode" == "0000" ]]
  then

    # source
    if [[ -e "$src_path" ]]
    then
      rm "$src_path"

      # local only
      if [[ "$type" == "lfile" ]]
      then
        return
      fi
    fi

    # destination
    if [[ -e "$dst_path" ]]
    then
      rm "$dst_path"
    fi

    # done
    return
  fi

  # check source
  if [[ ! -e "$src_path" ]]
  then
    echo "E: $src_path not found!"
    return
  fi

  if [[ "$(stat_mode "$src_path")" != "$mode" ]]
  then
    change_mode "$src_path" "$mode"
  fi

  # pass linking
  if [[ "$type" != "lfile" ]]
  then
    dotexec_link "$src" "$dst" "$path" "$type" "$mode" "$link"
  fi
} # dotexec_file

exec_git()
{
  local src="$1"
  local dst="$2"
  local path="$3"
  local type="$4"

  local gitpull="${5:-$dothier_file_gitpull}"
  local gitdepth="${6:-$dothier_file_gitdepth}"

  local src_path="$src/$path"
  local dst_path

  if [[ "$type" == "lgit" ]]
  then
    dst_path="$(dirname "$src/$path")"
  else
    dst_path="$(dirname "$dst/$path")"
  fi

  [[ "$dothier_debug" == "yes" ]] && echo "${FUNCNAME[0]}" "$@"

  local giturl gitname gitdir
  while IFS=$' \t' read -r giturl gitdst
  do
    # skip comments
    [[ "$giturl" =~ ^(#.*)?$ ]] && continue

    gitname="${giturl##*/}"
    gitdir="${gitname%*.git}"

    if [[ -n "$gitdst" ]]
    then
      # absolute path
      if [[ "$gitdir" =~ ^(/.*)?$ ]]
      then
        gitdst="$gitdst"
      else
        gitdst="$dst_path/$gitdst"
      fi
    else
      gitdst="$dst_path/$gitdir"
    fi

    echo " : git: $gitdst ($giturl)"

    if [[ -d "$gitdst" ]]
    then
      if [[ "$gitpull" == "yes" ]]
      then
        ( cd "$gitdst" && git pull -q )
      fi
    else
      ( git clone -q --depth "$gitdepth" "$giturl" "$gitdst" )
    fi

  done < "$src_path"
} # dotexec_git

read_dothier()
{
  local hier src dst path type mode link
  local dothier_exec

  hier="$1"
  src="$(cd "$(dirname "$hier")" && echo "$PWD")"
  dst="$2"

  if [[ ! -e "$hier" ]]
  then
    echo "E: file $hier not found!"
    show_help
    return
  fi

  # git pull (-g)
  if [[ "$dothier_gitpull" == "yes" ]]
  then
    if [[ -d "$src/.git" ]]
    then
      ( cd "$src" && git pull )
    fi
  fi

  while IFS=$' \t' read -r path type mode link
  do
    # skip comments
    [[ "$path" =~ ^(#.*)?$ ]] && continue

    # execute type
    case "$type" in
      dir|ldir)
        dothier_exec="exec_dir"
        ;;
      file|lfile)
        dothier_exec="exec_file"
        ;;
      link|llink)
        dothier_exec="exec_link"
        ;;
      git|lgit)
        dothier_exec="exec_git"
        ;;
      *)
        echo "E: unknown type $type"
        return
        ;;
    esac

    if [[ "$(type -t "$dothier_exec")" == "function" ]]
    then
      "$dothier_exec" "$src" "$dst" "$path" "$type" "$mode" "$link"
    else
      echo "E: no such function $dothier_exec"
    fi

  done < "$hier"
} # read_dothier

dothier_recursive()
{
  local hier hier_path hier_name dst src

  hier="$1"
  dst="$2"
  src="$3"
  hier_path="$(find "$src" -iname "$hier" | sort -u)"

  for path in $hier_path
  do
    hier_name="$(basename "$(dirname "$path")")"
    echo ": $hier_name"
    read_dothier "$path" "$dst"
  done
} # dothier_recursive

# supported
check_support

# options
while getopts ":Dhrgf:d:H:" opt
do
  case $opt in
    D)
      dothier_debug="yes"
      set -x
      ;;
    h)
      show_help
      exit 1
      ;;
    r)
      dothier_recursive="yes"
      ;;
    g)
      dothier_gitpull="yes"
      ;;
    f)
      dothier_file="$OPTARG"
      ;;
    d)
      dothier_dir="$OPTARG"
      ;;
    H)
      dothier_home="$OPTARG"
      ;;
    \?)
      echo "-$OPTARG is invalid!"
      show_usage
      exit 1
      ;;
    :)
      echo "-$OPTARG requires an argument!"
      show_usage
      exit 1
      ;;
    *)
      show_usage
      exit 1
      ;;
  esac
done

if [[ "$OPTIND" -eq 1 ]] || [[ "$OPTIND" -lt "$#" ]]
then
  show_usage
  exit 1
fi
#shift $((OPTIND -1))

# main
if [[ "$dothier_recursive" == "yes" ]]
then
  dothier_recursive "$dothier_file" "$dothier_home" "$dothier_dir"
else
  read_dothier "$dothier_file" "$dothier_home"
fi
